// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ControlClient is the client API for Control service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlClient interface {
	// Client-facing API
	SubmitJob(ctx context.Context, in *SubmitJobRequest, opts ...grpc.CallOption) (Control_SubmitJobClient, error)
	// Worker-facing API
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	PullTask(ctx context.Context, in *PullTaskRequest, opts ...grpc.CallOption) (*PullTaskResponse, error)
	ReportTask(ctx context.Context, in *ReportTaskRequest, opts ...grpc.CallOption) (*ReportTaskResponse, error)
}

type controlClient struct {
	cc grpc.ClientConnInterface
}

func NewControlClient(cc grpc.ClientConnInterface) ControlClient {
	return &controlClient{cc}
}

func (c *controlClient) SubmitJob(ctx context.Context, in *SubmitJobRequest, opts ...grpc.CallOption) (Control_SubmitJobClient, error) {
	stream, err := c.cc.NewStream(ctx, &Control_ServiceDesc.Streams[0], "/cloudsort.v1.Control/SubmitJob", opts...)
	if err != nil {
		return nil, err
	}
	x := &controlSubmitJobClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Control_SubmitJobClient interface {
	Recv() (*SubmitJobResponse, error)
	grpc.ClientStream
}

type controlSubmitJobClient struct {
	grpc.ClientStream
}

func (x *controlSubmitJobClient) Recv() (*SubmitJobResponse, error) {
	m := new(SubmitJobResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controlClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/cloudsort.v1.Control/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) PullTask(ctx context.Context, in *PullTaskRequest, opts ...grpc.CallOption) (*PullTaskResponse, error) {
	out := new(PullTaskResponse)
	err := c.cc.Invoke(ctx, "/cloudsort.v1.Control/PullTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) ReportTask(ctx context.Context, in *ReportTaskRequest, opts ...grpc.CallOption) (*ReportTaskResponse, error) {
	out := new(ReportTaskResponse)
	err := c.cc.Invoke(ctx, "/cloudsort.v1.Control/ReportTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlServer is the server API for Control service.
// All implementations must embed UnimplementedControlServer
// for forward compatibility
type ControlServer interface {
	// Client-facing API
	SubmitJob(*SubmitJobRequest, Control_SubmitJobServer) error
	// Worker-facing API
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	PullTask(context.Context, *PullTaskRequest) (*PullTaskResponse, error)
	ReportTask(context.Context, *ReportTaskRequest) (*ReportTaskResponse, error)
	mustEmbedUnimplementedControlServer()
}

// UnimplementedControlServer must be embedded to have forward compatible implementations.
type UnimplementedControlServer struct {
}

func (UnimplementedControlServer) SubmitJob(*SubmitJobRequest, Control_SubmitJobServer) error {
	return status.Errorf(codes.Unimplemented, "method SubmitJob not implemented")
}
func (UnimplementedControlServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedControlServer) PullTask(context.Context, *PullTaskRequest) (*PullTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullTask not implemented")
}
func (UnimplementedControlServer) ReportTask(context.Context, *ReportTaskRequest) (*ReportTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportTask not implemented")
}
func (UnimplementedControlServer) mustEmbedUnimplementedControlServer() {}

// UnsafeControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlServer will
// result in compilation errors.
type UnsafeControlServer interface {
	mustEmbedUnimplementedControlServer()
}

func RegisterControlServer(s grpc.ServiceRegistrar, srv ControlServer) {
	s.RegisterService(&Control_ServiceDesc, srv)
}

func _Control_SubmitJob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubmitJobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControlServer).SubmitJob(m, &controlSubmitJobServer{stream})
}

type Control_SubmitJobServer interface {
	Send(*SubmitJobResponse) error
	grpc.ServerStream
}

type controlSubmitJobServer struct {
	grpc.ServerStream
}

func (x *controlSubmitJobServer) Send(m *SubmitJobResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Control_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudsort.v1.Control/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_PullTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).PullTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudsort.v1.Control/PullTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).PullTask(ctx, req.(*PullTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_ReportTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).ReportTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloudsort.v1.Control/ReportTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).ReportTask(ctx, req.(*ReportTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Control_ServiceDesc is the grpc.ServiceDesc for Control service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Control_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloudsort.v1.Control",
	HandlerType: (*ControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _Control_Heartbeat_Handler,
		},
		{
			MethodName: "PullTask",
			Handler:    _Control_PullTask_Handler,
		},
		{
			MethodName: "ReportTask",
			Handler:    _Control_ReportTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubmitJob",
			Handler:       _Control_SubmitJob_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
